[
    {
        "id": "7bbb9254c033f421",
        "type": "tab",
        "label": "Flujo 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ui_tab_main",
        "type": "ui_tab",
        "name": "IoT Dashboard",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "ui_group_main",
        "type": "ui_group",
        "name": "Datos Sensores",
        "tab": "ui_tab_main",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false
    },
    {
        "id": "68291a8686598f4f",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "8c2357abc5ae1641",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "mqtt_broker",
        "type": "mqtt-broker",
        "name": "HiveMQ Broker",
        "broker": "156ffaebf08c44bd8b8184e06f2fd14f.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "8c2357abc5ae1641",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "mqtt_in_receipt",
        "type": "mqtt in",
        "z": "7bbb9254c033f421",
        "name": "MQTT - Clase/Iot/Cmos/#",
        "topic": "Clase/Iot/Cmos/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "mqtt_broker",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 120,
        "wires": [
            [
                "func_extract_code"
            ]
        ]
    },
    {
        "id": "func_extract_code",
        "type": "function",
        "z": "7bbb9254c033f421",
        "name": "Extraer código y preparar payload",
        "func": "// topic ejemplo: Clase/Iot/Cmos/2171518/data\nvar parts = msg.topic.split(\"/\");\nvar codigo = parts[3];  // <- este es el lugar\n\n// Ignorar si no hay código válido\nif (!codigo) {\n    return null;\n}\n\n// Extraer datos del payload (ya es JSON)\nvar temperatura = (msg.payload.temperatura !== undefined) ? msg.payload.temperatura : null;\nvar humedad = (msg.payload.humedad !== undefined) ? msg.payload.humedad : null;\nvar buzzer = (msg.payload.buzzer !== undefined) ? msg.payload.buzzer : 0;\n\n// Ignorar si el sensor no tiene datos válidos\nif (temperatura === null && humedad === null) {\n    return null;\n}\n\n// 1️⃣ Mensajes para los gauges\nvar msgTemp = {\n    topic: \"Temperatura\",\n    payload: temperatura,\n    codigo: codigo\n};\n\nvar msgHum = {\n    topic: \"Humedad\",\n    payload: humedad,\n    codigo: codigo\n};\n\nvar msgBuzz = {\n    topic: \"Buzzer\",\n    payload: buzzer,\n    codigo: codigo\n};\n\n// 2️⃣ Mensaje para la tabla con todos los datos\nvar allData = flow.get('allData') || {};\n\n// Actualizar solo sensores válidos\nallData[codigo] = {\n    temperatura: temperatura,\n    humedad: humedad,\n    buzzer: buzzer\n};\n\n// Guardar de nuevo\nflow.set('allData', allData);\n\n// Mensaje para la tabla\nvar msgTable = {\n    topic: \"Todos los sensores\",\n    payload: allData\n};\n\n// 3️⃣ Retornar los 4 mensajes en paralelo\nreturn [msgTemp, msgHum, msgBuzz, msgTable];\n",
        "outputs": 4,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 240,
        "wires": [
            [
                "gauge_temp"
            ],
            [
                "gauge_hum"
            ],
            [],
            [
                "debug_out",
                "func_store_all"
            ]
        ]
    },
    {
        "id": "gauge_temp",
        "type": "ui_gauge",
        "z": "7bbb9254c033f421",
        "name": "Temperatura",
        "group": "ui_group_main",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Temp - {{msg.codigo}}",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "50",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 670,
        "y": 80,
        "wires": []
    },
    {
        "id": "gauge_hum",
        "type": "ui_gauge",
        "z": "7bbb9254c033f421",
        "name": "Humedad",
        "group": "ui_group_main",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Hum - {{msg.codigo}}",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 680,
        "y": 160,
        "wires": []
    },
    {
        "id": "debug_out",
        "type": "debug",
        "z": "7bbb9254c033f421",
        "name": "Output completo",
        "active": true,
        "tosidebar": true,
        "console": false,
        "complete": "payload",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 400,
        "wires": []
    },
    {
        "id": "071021f521190f9a",
        "type": "ui_switch",
        "z": "7bbb9254c033f421",
        "name": "",
        "label": "Buzzer",
        "tooltip": "",
        "group": "ui_group_main",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "Buzzer",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 380,
        "y": 560,
        "wires": [
            [
                "a241c1517b5edc20"
            ]
        ]
    },
    {
        "id": "a241c1517b5edc20",
        "type": "mqtt out",
        "z": "7bbb9254c033f421",
        "name": "buzzer",
        "topic": "Clase/Iot/Cmos/2171518/buzzer",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqtt_broker",
        "x": 590,
        "y": 560,
        "wires": []
    },
    {
        "id": "func_store_all",
        "type": "function",
        "z": "7bbb9254c033f421",
        "name": "Almacenar datos de todos sensores",
        "func": "// Mantener estado global de todos los sensores\nvar allData = flow.get('allData') || {};\n\n// Actualizar con los nuevos datos (incluyendo buzzer)\nallData[msg.payload.codigo] = {\n    temperatura: msg.payload.temperatura,\n    humedad: msg.payload.humedad,\n    buzzer: msg.payload.buzzer\n};\n\n// Guardar de nuevo\nflow.set('allData', allData);\n\n// Enviar todo el estado para mostrar en tabla\nmsg.payload = allData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 280,
        "wires": [
            [
                "ui_template_table"
            ]
        ]
    },
    {
        "id": "ui_template_table",
        "type": "ui_template",
        "z": "7bbb9254c033f421",
        "group": "ui_group_main",
        "name": "Tabla datos sensores",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<div>\n  <h3>Datos de estudiantes</h3>\n  <table border=\"1\" style=\"width:100%;text-align:center;\">\n    <thead>\n      <tr>\n        <th>Código</th>\n        <th>Temperatura (°C)</th>\n        <th>Humedad (%)</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr ng-repeat=\"(codigo, datos) in msg.payload\">\n        <td>{{codigo}}</td>\n        <td>{{datos.temperatura}}</td>\n        <td>{{datos.humedad}}</td>\n      </tr>\n    </tbody>\n  </table>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 880,
        "y": 400,
        "wires": [
            []
        ]
    }
]